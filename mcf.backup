/**************************************************************************
MCF.H of ZIB optimizer MCF, SPEC version

Dres. Loebel, Borndoerfer & Weider GbR (LBW)
Churer Zeile 15, 12205 Berlin

Konrad-Zuse-Zentrum fuer Informationstechnik Berlin (ZIB)
Scientific Computing - Optimization
Takustr. 7, 14195 Berlin

This software was developed at ZIB Berlin. Maintenance and revisions 
solely on responsibility of LBW

Copyright (c) 1998-2000 ZIB.           
Copyright (c) 2000-2002 ZIB & Loebel.  
Copyright (c) 2003-2005 Loebel.
Copyright (c) 2006-2010 LBW.
**************************************************************************/
/*  LAST EDIT: Wed May 26 00:06:03 2010 by Loebel (opt0.zib.de)  */
/*  $Id: mcf.c,v 1.17 2010/05/26 08:26:29 bzfloebe Exp $  */



#include "mcf.h"
#include "time.h"
#include <stdio.h>
#include <stdlib.h>
#include <papi.h>
#include <stdio.h>
#include <time.h>

#define TEST_ITR 300000
#define WINDOW_SIZE 40000000
#define SCALE 1.1
#define HISTORY_LENGTH 1

#define SPEC
int total = 0; /* total overflows */
int EventSet = PAPI_NULL;
long long count[4];
long long dump[4];
int is_profling = 0;

int handler_es = PAPI_NULL;
// int interval = 100;
int interval = 20;
double lower_bound = 0.9;
double upper_bound = 1.1;
// int min_interval = 100;
// int max_interval = 100000;
int min_interval = 2;
int max_interval = 200;
int myround = 0;
long long total_miss = 0;

unsigned int lfsr = 0xACE1u;
unsigned period = 0;
char s[16 + 1];

double scaler = 1;
double H_IPC[HISTORY_LENGTH];
double H_br_miss[HISTORY_LENGTH];
double H_c_miss[HISTORY_LENGTH];
double manhattan_dis[HISTORY_LENGTH];
double coeff_IPC = 1;
double coeff_br_miss = 1;
double coeff_c_miss = 1;
double dis_threshold = 10;
int max_scaler = 100;
int min_scaler = 1;

void handle_error(int retval)
{
    printf("PAPI error %d: %s\n", retval, PAPI_strerror(retval));
    exit(1);
}

void handler(int EventSet, void *address, long_long overflow_vector, void *context)
{
    /*fprintf(stderr, "handler(%d) Overflow at %p! vector=0x%llx\n",
            EventSet, address, overflow_vector);*/
    myround++;
    //printf("scaler: %f\n", scaler);
    PAPI_read(EventSet, count);
    PAPI_reset(EventSet);
    double IPC = ((double) count[1] / WINDOW_SIZE) / scaler;
    double br_miss = (double)count[2] / (double)scaler;
    double c_miss = (double)count[3] / (double)scaler;
    //printf("Cycles: %lld, Branch cnt: %lld, cache_cnt: %lld\n", count[0], count[2], count[3]);
    //printf("IPC: %f, Branch miss: %f, cache_miss: %f\n", IPC, br_miss, c_miss);
    printf("%f %f %f %f\n", IPC, br_miss, c_miss, scaler);

    int i = 0;

    if (myround <= HISTORY_LENGTH)
    {
        for (i = 0; i < HISTORY_LENGTH - 1; i++)
        {
            H_IPC[i] = H_IPC[i + 1];
            H_br_miss[i] = H_br_miss[i + 1];
            H_c_miss[i] = H_c_miss[i + 1];
        }
        H_IPC[i] = IPC;
        H_br_miss[i] = br_miss;
        H_c_miss[i] = c_miss;
        return;
    }

    for (i = 0; i < HISTORY_LENGTH; i++)
    {
        double IPC_dis = (IPC / (H_IPC[i]+1) - H_IPC[i] / (IPC+1)) * (IPC / (H_IPC[i]+1) - H_IPC[i] / (IPC+1)) * coeff_IPC;
        double br_miss_dis = (br_miss / (H_br_miss[i]+1) - H_br_miss[i] / (br_miss+1)) * (br_miss / (H_br_miss[i]+1) - H_br_miss[i] / (br_miss+1)) * coeff_br_miss;
        double c_miss_dis = (c_miss / (H_c_miss[i]+1) - H_c_miss[i] / (c_miss+1)) * (c_miss / (H_c_miss[i]+1) - H_c_miss[i] / (c_miss+1)) * coeff_c_miss;
        manhattan_dis[i] = IPC_dis + br_miss_dis + c_miss_dis;
        //printf("man dis: %f, IPC_dis: %f, br_dis: %f, c_dis: %f\n", manhattan_dis[i], IPC_dis, br_miss_dis, c_miss_dis);
    }

    for (i = 0; i < HISTORY_LENGTH - 1; i++)
    {
        H_IPC[i] = H_IPC[i + 1];
        H_br_miss[i] = H_br_miss[i + 1];
        H_c_miss[i] = H_c_miss[i + 1];
    }
    H_IPC[i] = IPC;
    H_br_miss[i] = br_miss;
    H_c_miss[i] = c_miss;

    int flag = 0;
    for (i = 0; i < HISTORY_LENGTH; i++)
    {
        if (manhattan_dis[i] > dis_threshold)
            flag = 1;
    }

    if (flag == 0)
    {
        if (scaler >= max_scaler)
            return;
        else
        {
            scaler = scaler * SCALE;
        }
    }
    else
    {
        scaler = min_scaler;
    }

    PAPI_stop(EventSet, dump);
    PAPI_overflow(EventSet, PAPI_TOT_CYC, WINDOW_SIZE * scaler, 0, handler);
    PAPI_start(EventSet);
}


extern LONG min_impl_duration;
network_t net;





#ifdef _PROTO_
LONG global_opt( void )
#else
LONG global_opt( )
#endif
{
  LONG new_arcs;
  LONG residual_nb_it = 1;
  
  
  new_arcs = -1;

  while( new_arcs )
  {
#ifdef REPORT
    //printf( "active arcs                : %" PRId64 "\n", net.m );
#endif
    
    primal_net_simplex( &net );
    
#ifdef REPORT
    //printf( "simplex iterations         : %" PRId64 "\n", net.iterations );
    //printf( "objective value            : %0.0f\n", flow_cost(&net) );
#endif
    
    
#if defined AT_HOME
    //printf( "iterations                 : %ld\n", residual_nb_it );
#endif
    
    
    if( net.m_impl )
    {
      new_arcs = suspend_impl( &net, (cost_t)-1, 0 );
      
      if ( new_arcs < 0)
      {
#ifdef REPORT
        //printf( "not enough memory, exit(-1)\n" );
#endif
        
        exit(-1);
      }
#ifdef REPORT
      if( new_arcs )
        //printf( "erased arcs                : %" PRId64 "\n", new_arcs );
#endif
    }
    else 
    {
      refreshPositions(&net, &getOriginalArcPosition,net.m);
    }
    
    
    new_arcs = price_out_impl( &net );
    
#ifdef REPORT
    if( new_arcs )
      //printf( "new implicit arcs          : %" PRId64 "\n", new_arcs );
#endif
    
    if( new_arcs < 0 )
    {
#ifdef REPORT
      //printf( "not enough memory, exit(-1)\n" );
#endif
      
      exit(-1);
    }
    
#ifndef REPORT
    //printf( "\n" );
#endif
    
    residual_nb_it++;
  }
  
  net.optcost = flow_cost(&net);
  //printf( "checksum                   : %0.0f\n", net.optcost );
  
  return 0;
}






#ifdef _PROTO_
int main( int argc, char *argv[] )
#else
int main( argc, argv )
    int argc;
    char *argv[];
#endif
{
  int outnum; 
  char outfile[80];
  if( argc < 2 )
    return -1;
  
#ifndef SPEC
  time_t startTime, endTime;
  time(&startTime);
#endif
  
  //printf( "\nMCF SPEC CPU version 1.11\n" );
  //printf( "Copyright (c) 1998-2000 Zuse Institut Berlin (ZIB)\n" );
  //printf( "Copyright (c) 2000-2002 Andreas Loebel & ZIB\n" );
  //printf( "Copyright (c) 2003-2005 Andreas Loebel\n" );
  //printf( "Copyright (c) 2006-2010 Dres. Loebel, Borndoerfer & Weider "\
          "GbR (LBW)\n" );
  //printf( "\n" );
  
  //omp_set_num_threads(1);
  clock_t start, end;
    double cpu_time_used;

    start = clock();

    int retval = PAPI_NULL;

    /* Initialize the PAPI library */
    retval = PAPI_library_init(PAPI_VER_CURRENT);
    if (retval != PAPI_VER_CURRENT)
        handle_error(1);

    /* Create the EventSet */
    if (PAPI_create_eventset(&EventSet) != PAPI_OK)
        handle_error(1);

    /* Add Total Instructions Executed to our EventSet */
    if (PAPI_add_event(EventSet, PAPI_TOT_CYC) != PAPI_OK)
        handle_error(1);

    if (PAPI_add_event(EventSet, PAPI_TOT_INS) != PAPI_OK)
        handle_error(1);

    if (PAPI_add_event(EventSet, PAPI_BR_MSP) != PAPI_OK)
        handle_error(1);

    if (PAPI_add_event(EventSet, PAPI_L1_DCM) != PAPI_OK)
        handle_error(1);

    /* Call handler every 100000 instructions */
    retval = PAPI_overflow(EventSet, PAPI_TOT_CYC, WINDOW_SIZE, 0, handler);
    if (retval != PAPI_OK)
        handle_error(1);

    PAPI_start(EventSet);
  
  memset( (void *)(&net), 0, (size_t)sizeof(network_t) );
  net.bigM = (LONG)BIGM;
  
  
  strcpy( net.inputfile, argv[1] );
  if (argc == 3) {
     outnum = atoi(argv[2]);
     //sprintf(outfile,"mcf.%d.out",outnum);
  } else {
     strcpy(outfile,"mcf.out"); 
  }  
 
  if( read_min( &net ) )
  {
    //printf( "read error, exit\n" );
    getfree( &net );
    return -1;
  }
  
#ifndef SPEC
#ifdef _OPENMP
  //printf( "number of threads          : %d\n", omp_get_max_threads() );
#else
  //printf( "single threaded\n" );
#endif
#endif
  
#if defined(REPORT) || defined(SPEC)
  //printf( "nodes                      : %" PRId64 "\n", net.n_trips );
#endif
  
  
  primal_start_artificial( &net );
  global_opt( );
  
  
  
  if( write_objective_value( outfile, &net ) )
  {
    getfree( &net );
    return -1;    
  }
  
  
  getfree( &net );
#ifndef SPEC
  time(&endTime);
  printf("runtime = %ld seconds\n",endTime - startTime);
#endif
  
  
#ifdef REPORT
  //printf( "done\n" );
#endif
  
  
  end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("time: %lf\n", cpu_time_used);
    return 0;
}
